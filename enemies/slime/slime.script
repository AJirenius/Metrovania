go.property("velocity", vmath.vector3(0,0,0))

local gop = require "utils.gop"
local config = require "main.config"
local mess = require "shared.mess"
local state = require "enemies.enemy_state"



local function update_movement(self,dt)
	self.global.acceleration.y = self.global.acceleration.y - config.GRAVITY * dt
	self.global.velocity = self.global.velocity + (self.global.acceleration * dt)
	self.global.velocity = self.global.velocity * (1-(config.FRICTION * dt))
	go.set_position(go.get_position() + self.global.velocity)
end

local function reset(self)
    self.correction = vmath.vector3(0,0,0)
    self.global.acceleration = vmath.vector3(0,0,0)
end

function init(self)
	self.global = gop.get_properties()
    reset(self)
    self.global.velocity = self.velocity
    state.add_enemy(self.global.url)
    state.set_status(self.global.url, state.STATUS_PROTECT)
end

function update(self, dt)	


	update_movement(self, dt)
	
	reset(self)
end

local function handle_static_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
    local comp = (math.abs(distance) - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    if normal.x ~= 0 and  state.get_state(self.global.url) == state.WALK then 
    	-- hit a side static
    	self.global.velocity.x = 0 
    	state.set_state(self.global.url, state.WALK, true) -- forcing a new walk if already walking
    end
    if normal.y ~= 0 then 
    	if normal.y > 0 and state.get_state(self.global.url) < state.WALK and self.global.velocity.y < 0  then
    		state.set_state(self.global.url, state.WALK) -- feeling ground, can start to walk
    	end
    	self.global.velocity.y = 0 
    end
end

function on_message(self, message_id, message, sender)
 	if message_id == mess.msg_contact_point_response then
        if message.group == mess.group_static_bg then
            handle_static_contact(self, message.normal, message.distance)
        end
    end
end