go.property("player_id", 0)

local config = require "main.config"
local anim = require "utils.anim"
local player_state = require "player.player_state"
local player_touch = require "player.player_touch"
local mess = require "shared.mess"




-- pre-hashing ids improves performance




function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("/sword", "set_parent", { parent_id = go.get_id() } )

    self.velocity = vmath.vector3(0, 0, 0)
    self.correction = vmath.vector3()
    self.move_input = vmath.vector3()

    self.direction = 1
    self.vertical_contact = 0

    self.input_up = hash("up_"..self.player_id)
	self.input_down = hash("down_"..self.player_id)
	self.input_left = hash("left_"..self.player_id)
	self.input_right = hash("right_"..self.player_id)
	self.input_jump = hash("jump_"..self.player_id)
	self.input_fire = hash("fire_"..self.player_id)
    
   	player_state.set_state(player_state.FALLING)
end



local function change_direction(self,new_direction)
	if new_direction ~= nil then
		self.direction = new_direction
	else 
		self.direction = self.direction * -1
	end
	if self.direction == 1 then 
		self.dir = "right"
		--go.set(".","euler.y",0)
		--sprite.set_hflip("#sprite", false)
	else
		self.dir = "left"
		--sprite.set_hflip("#sprite", true)
		--go.set(".","euler.y",180)
	end
end

local function update_animations(self)
	if player_state.get_state() == player_state.DEAD then return end
	if self.is_attacking == true then return end
    if player_state.get_state() == player_state.STANDING then
        if self.velocity.x == 0 then
            anim.play_animation(self, mess.anim_idle, true)
        else
            anim.play_animation(self, mess["anim_run_"..self.dir], true)
        end
    else
        if self.velocity.y > 0 then
            anim.play_animation(self, mess.anim_jump, false)
        else
            anim.play_animation(self, mess.anim_fall, false)
        end
    end
end


local function update_movement(self,dt)
	-- horizontal speed
    local h_speed = self.move_input.x * config.PLAYER_MAX_SPEED -- -1 or 1
    -- calculate the difference between our current speed and the target speed
    local speed_diff = h_speed - self.velocity.x
    -- the complete acceleration to integrate over this frame
    local acceleration = vmath.vector3(0, 0, 0)

    if player_state.get_state() ~= player_state.CLIMBING then 
    	acceleration.y = -config.GRAVITY 
    else
    	self.velocity.y = self.move_input.y * config.PLAYER_MAX_SPEED 
    end
    if speed_diff ~= 0 then -- if speed_diff is 0 then no changes should be done, right?
        -- set the acceleration to work in the direction of the difference
        if speed_diff < 0 then
            acceleration.x = -config.PLAYER_ACCELERATION
        else
            acceleration.x = config.PLAYER_ACCELERATION
        end
        -- decrease the acceleration when air-borne to give a slower feel
        if not self.ground_contact then
            acceleration.x = config.AIR_FRICTION * acceleration.x
        end
    end
    -- calculate the velocity change this frame (dv is short for delta-velocity)
    local dv = acceleration * dt
    -- check if dv exceeds the intended speed difference, clamp it in that case
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    -- save the current velocity for later use
    -- (self.velocity, which right now is the velocity used the previous frame)
    local v0 = self.velocity
    -- calculate the new velocity by adding the velocity change
    self.velocity = self.velocity + dv
    
    if self.velocity.y > config.PLAYER_MAX_FALL_SPEED then self.velocity.y = config.PLAYER_MAX_FALL_SPEED end
    
    -- calculate the translation this frame by integrating the velocity
    local dp = (v0 + self.velocity) * dt * 0.5
    -- apply it to the player character
    go.set_position(go.get_position() + dp)
end

function update(self, dt)
    
	update_movement(self, dt)
    update_animations(self)
    
    -- reset 
    self.correction = vmath.vector3()
    self.move_input.x = 0
    self.move_input.y = 0
    self.vertical_contact = 0
    self.will_fire = false
    self.will_dash = false
    player_state.reset(self)
    player_touch.reset()
    
end

local function handle_static_contact(self, normal, distance)  
	local proj = vmath.dot(self.correction, normal)
    local comp = (distance - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    -- check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
    if normal.y > 0.7 then
        self.vertical_contact = 1
        player_state.set_state(player_state.STANDING)
    end     
    -- reduce velocity
    proj = vmath.dot(self.velocity, normal)
    if proj < 0 then self.velocity = self.velocity - proj * normal end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("spine_animation_done") then
		if message.animation_id == hash("front_attack") then
			self.is_attacking = false
		end
	end
   if message_id == mess.msg_contact_point_response then
   		player_touch.add(message.group)
        if message.group == mess.group_static_bg then
            handle_static_contact(self, message.normal, message.distance)
        elseif message.group == mess.group_climbable_top then
        	if message.normal.y > 0.7 and message.distance < 15 then
        		handle_static_contact(self, message.normal, message.distance)
        	end
        end
    end
end



local function jump(self)
    if self.vertical_contact == 1 then
        self.velocity.y = config.JUMP_ACCELERATION
         anim.play_animation(self, mess.anim_jump)
    end
end

local function abort_jump(self)
    if self.velocity.y > 0 then
        self.velocity.y = self.velocity.y * 0.5
    end
end

local function attack(self)
	if self.is_attacking ~= true then
		self.is_attacking = true
		anim.play_animation(self, mess.anim_attack, false)
	end
end

function on_input(self, action_id, action)
	if player_state.get_state() == player_state.DEAD then return end
    if action_id == self.input_left then
        self.move_input.x = -action.value
        change_direction(self,-1)
    elseif action_id == self.input_right then
        self.move_input.x = action.value
        change_direction(self,1)
    elseif action_id == self.input_up then
    	if player_touch.has(mess.group_climbable) then player_state.set_state(player_state.CLIMBING) end
        self.move_input.y = action.value
    elseif action_id == self.input_down then
    	if player_touch.has(mess.group_climbable) then player_state.set_state(player_state.CLIMBING) end
        self.move_input.y = -action.value
    elseif action_id == self.input_jump then
        if action.pressed then
        	jump(self)
        elseif action.released then
            abort_jump(self)
        end
	end
	if action_id == self.input_fire and action.pressed then
		attack(self)
		msg.post("/sword",mess.msg_enable)
		msg.post("/sword",mess.msg_hit, { direction = self.direction })
	end
end