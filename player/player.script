go.property("player_id", 0)

local config = require "main.config"
local anim = require "utils.anim"
local player_state = require "player.player_state"

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")

local group_static_bg = hash("static_bg")
local group_climbable = hash("climbable")

local anim_run = hash("walk")
local anim_wall_glide = hash("wall_glide")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_die = hash("die")
local anim_dash = hash("dash")



function init(self)
    msg.post(".", "acquire_input_focus")

    self.velocity = vmath.vector3(0, 0, 0)
    self.correction = vmath.vector3()
    self.move_input = vmath.vector3()

    self.flipped_sprite = false
    self.vertical_contact = 0
    self.state = player_state.FALLING
    self.is_aiming = false
    self.will_fire = false
    self.will_dash = false
    self.go_aim = go.get_id("/aim_"..self.player_id)
    
    self.input_up = hash("up_"..self.player_id)
	self.input_down = hash("down_"..self.player_id)
	self.input_left = hash("left_"..self.player_id)
	self.input_right = hash("right_"..self.player_id)
	self.input_jump = hash("jump_"..self.player_id)
	self.input_fire = hash("fire_"..self.player_id)
    
   	player_state.set_state(self, player_state.FALLING)
end



local function flip_horizontal(self,flipped)
	if flipped ~= nil then
		self.flipped_sprite = flipped
	else 
		self.flipped_sprite = not self.flipped_sprite
	end
	sprite.set_hflip("#sprite", self.flipped_sprite)
end

local function update_animations(self)
	if self.state == player_state.DEAD then return end
    if self.state == player_state.STANDING then
        if self.velocity.x == 0 then
            anim.play_animation(self, anim_idle)
        else
            anim.play_animation(self, anim_run)
        end
    else
        if self.velocity.y > 0 then
            anim.play_animation(self, anim_jump)
        else
            anim.play_animation(self, anim_fall)
        end
    end
end


local function update_movement(self,dt)
	-- horizontal speed
    local h_speed = self.move_input.x * config.PLAYER_MAX_SPEED -- -1 or 1
    -- calculate the difference between our current speed and the target speed
    local speed_diff = h_speed - self.velocity.x
    -- the complete acceleration to integrate over this frame
    local acceleration = vmath.vector3(0, 0, 0)

    if self.state ~= player_state.CLIMBING then 
    	acceleration.y = -config.GRAVITY 
    else
    	self.velocity.y = self.move_input.y * config.PLAYER_MAX_SPEED 
    end
    if speed_diff ~= 0 then -- if speed_diff is 0 then no changes should be done, right?
        -- set the acceleration to work in the direction of the difference
        if speed_diff < 0 then
            acceleration.x = -config.PLAYER_ACCELERATION
        else
            acceleration.x = config.PLAYER_ACCELERATION
        end
        -- decrease the acceleration when air-borne to give a slower feel
        if not self.ground_contact then
            acceleration.x = config.AIR_FRICTION * acceleration.x
        end
    end
    -- calculate the velocity change this frame (dv is short for delta-velocity)
    local dv = acceleration * dt
    -- check if dv exceeds the intended speed difference, clamp it in that case
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    -- save the current velocity for later use
    -- (self.velocity, which right now is the velocity used the previous frame)
    local v0 = self.velocity
    -- calculate the new velocity by adding the velocity change
    self.velocity = self.velocity + dv
    
    if self.velocity.y > config.PLAYER_MAX_FALL_SPEED then self.velocity.y = config.PLAYER_MAX_FALL_SPEED end
    
    -- calculate the translation this frame by integrating the velocity
    local dp = (v0 + self.velocity) * dt * 0.5
    -- apply it to the player character
    go.set_position(go.get_position() + dp)
end

function update(self, dt)
    
	update_movement(self, dt)
    update_animations(self)
    
    -- reset 
    self.correction = vmath.vector3()
    self.move_input.x = 0
    self.move_input.y = 0
    self.vertical_contact = 0
    self.will_fire = false
    self.will_dash = false
    player_state.reset(self,self.can_climb)
    self.can_climb = false
    
end

local function handle_static_contact(self, normal, distance)
     
	local proj = vmath.dot(self.correction, normal)
    local comp = (distance - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    -- check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
    if normal.y > 0.7 then
        self.vertical_contact = 1
        player_state.set_state(self, player_state.STANDING)
    end     
    -- reduce velocity
    proj = vmath.dot(self.velocity, normal)
    if proj < 0 then self.velocity = self.velocity - proj * normal end
end

function on_message(self, message_id, message, sender)

   if message_id == msg_contact_point_response then
        if message.group == group_static_bg then
            handle_static_contact(self, message.normal, message.distance)
        elseif message.group == group_climbable then
        	self.can_climb = true
        	print(message.group)
        end
    end
end

local function jump(self)
    if self.vertical_contact == 1 then
        self.velocity.y = config.JUMP_ACCELERATION
         anim.play_animation(self, anim_jump)
    end
end

local function abort_jump(self)
    if self.velocity.y > 0 then
        self.velocity.y = self.velocity.y * 0.5
    end
end

function on_input(self, action_id, action)
	if self.state == player_state.DEAD then return end
    if action_id == self.input_left then
        self.move_input.x = -action.value
        flip_horizontal(self,true)
    elseif action_id == self.input_right then
        self.move_input.x = action.value
        flip_horizontal(self,false)
    elseif action_id == self.input_up then
    	if self.can_climb == true then player_state.set_state(self, player_state.CLIMBING) end
        self.move_input.y = action.value
    elseif action_id == self.input_down then
    	if self.can_climb == true then player_state.set_state(self, player_state.CLIMBING) end
        self.move_input.y = -action.value
    elseif action_id == self.input_jump then
        if action.pressed then
        	jump(self)
        elseif action.released then
            abort_jump(self)
        end
	end
	if action_id == self.input_fire then
		print("hit")
	end
end