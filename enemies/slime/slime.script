go.property("activation_radius", 500)
go.property("aware_radius", 200)
go.property("walk_distance", 40)
go.property("walk_delay", 0)
go.property("walk_speed", 20)
go.property("leap_prob", 0.01)
go.property("leap_acc", 600)

local STATE_FALLING = 1
local STATE_WALKING = 2


local xmath = require "utils.xmath"
local config = require "main.config"
local msg = require "shared.msg"

local function go_to_new_x(self)
	if self.is_walking then return end
 	self.is_walking = true
	local pos = go.get_position()
	local distance = (math.random()-0.5) * self.walk_distance * 2
	local new_x = pos.x + distance
	local time = math.abs(distance) / self.walk_speed
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, new_x, go.EASING_LINEAR, time, math.random() * self.walk_delay, function() 
		self.is_walking = false 
		go_to_new_x(self)
	end )
end

local function set_state(self,state)
	if self.current_state == state then return end
	self.current_state = state
	if state == STATE_WALKING then
		go_to_new_x(self)
	end
end



local function leap_towards_player(self)
	self.is_walking = false
	go.cancel_animations(".", "position.x")
	self.acceleration.y = self.leap_acc
	if go.get_position().x - go.get_position("/player").x > 0 then
		self.acceleration.x = -self.leap_acc*0.6 
	else
		self.acceleration.x = self.leap_acc*0.6
	end
	
end

local function update_movement(self,dt)
	self.acceleration.y = self.acceleration.y - config.GRAVITY * dt
	self.velocity = self.velocity + (self.acceleration * dt)
	self.velocity = self.velocity * (1-(config.FRICTION * dt))
	go.set_position(go.get_position() + self.velocity)
end

local function reset(self)
    self.correction = vmath.vector3(0,0,0)
    self.acceleration = vmath.vector3(0,0,0)
    set_state(self, STATE_FALLING)
end

function init(self)
    reset(self)
    self.velocity = vmath.vector3()
    set_state(self,STATE_FALLING)
    self.is_walking = false
end

function update(self, dt)	

	-- check awareness
	local dist = xmath.distance(go.get_position(),go.get_position("/player"))
	if dist < self.aware_radius and self.current_state == STATE_WALKING then
		local rnd = math.random()
		if  rnd < self.leap_prob then leap_towards_player(self) end
	end

	update_movement(self, dt)
	
	
	reset(self)
end

local function handle_static_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
    local comp = (math.abs(distance) - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    print(normal,distance)
    if normal.x ~= 0 then 
    	self.velocity.x = 0 
    	go.cancel_animations(".", "position.x")
    	self.is_walking = false
    	go_to_new_x(self)
    end
    if normal.y ~= 0 then 
    	
    	self.velocity.y = 0 
    	if normal.y > 0 then
    		set_state(self, STATE_WALKING)
    	end
    end
    
end

function on_message(self, message_id, message, sender)
 	if message_id == msg.msg_contact_point_response then
        if message.group == msg.group_static_bg then
            handle_static_contact(self, message.normal, message.distance)
        end
    end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
